https://net.cybbh.io/public/networking/latest/index.html

Less learning how to directly defend the network and more of the network at basic level


Goodbye my friend, you messed up again.

Port range 51500-51599
c 6,005.64
s 42.35
I 2,119.16
Network Fundamentals 
______________________________________________________________________________________________________________________

a hex character is a nibble or 4 bits
2 hex characters is a byte
2 half words are a word
a long word is two words 
a quad word is two long words

Communication happens through encapsulation and decapsulation depending on which layer of the OSI model it is going through
Looking at the graph there are different examples of which layers of the OSI model certain applications work through
Data link sub-layers MAC and LLC 
The destination is sent first over ethernet beclause when the frames are going through switches it makes it faster, because they don't need a source just a destination

Common Ethertypes controlled by IANA.org:

        0x0800 - IPv4

        0x0806 - ARP

        0x86DD - IPv6

        0x8100 - VLAN Tagging 802.1q

The default value of the IHL is 5. but why? 
20B or 160b because it is broken into words (32b) making it 5
Understand headers and how to read them
Linux 64 Windows 128 Cisco 255 on the TTL
Linux just uses icmp and Windows also uses UDP
1 for icmp, 6 for tcp and, 11 for udp

        Flags                        Frag Offset
0        0        0        |        
Res      DF       MF
On the fragmlentation process the offset will go up by number of 8 bits chunks which is why it's going up by 185 instead of 1480

Don't worry about all that noise wireshark got you baby
IPv4 we got APIPA 169.254.0.0/16

Session layer has SOCKS
or Socket Secure
PPTP is a very old and insecure vpn developed by Microsoft
L2TP Cisco and Microsoft combined to create this
SMB/CIFS is Server Message Block shit
RPC is running commands or system calls over the network

Presentation, the difference between a Villain and a Super Villain
Translation
Formating
Encoding (ASCII,EBCDIC,HEX,BASE64)
Encryption (Symmetric or Asymmetric)
Compression

Application Layer THE BEEFY BOI
FTP gives you a prompt
FTP active, like calling the pizza place and telling them to deliver it
FTP passive, calling the pizza to order it, but you still have to go pick it up

Telnet is an insecure method of getting a shell





Spanning Tree Protocol  
Eliminate single point of failure 
ARP requests can cause a broadcast storm with a bunch of interconnected switches 
One switch directly connected to the router is the root bridge
Setting alternate ports to a blocking state can stop a broadcast storm
There's also a Rapid STP which speeds up the setup process
Cisco versions of STP
Per VLAN Spanning Tree (PVST)
Per VLAN Spannning Tree Plus (PVST+)

Layer 2 Discovery Protocols
Cisco Discovery Protocol (CDP)
Foundry Discovery Protocol (FDP)
Link Layer Discovery Protocol (LLDP)


Dynamic Trunking Protocol
Trunk ports are what connect different VLANS


VLAN Trunking Protocol
Whatever updates are made to the VTP are pushed out to all other VLANs in the VTP domain


Port Security
Modes
 - Shutdown
 - Restrict
 - Protect

Switches separate collision domains
Routers separate broadcast domains
WE ARE NOT MAKING ROUTER CONFIGS
Subnetting is dividing networksNetwork Fundamentals 
______________________________________________________________________________________________________________________

Supernetting is combining networks, trading network bits for host bits
DuckDuckGo.com can subnet for you
The lookup process is based off what is the closest match
RIP, EIGRP (USMC), OSPF (ARMY), BGP (Internet)
Having multiple routers is good for backups and reducing a single point of failure
Some protocols for these are 
Hot Standby Router Protocol (HSRP)
Virtual Router Redundancy Protocol (VRRP)
Gateway Load Balancing Protocol (GLBP)

Administrative Distance
Tells the router how much it should trust the route it is looking at

Metrics
Hop
Bandwith
Delay
Load
Maximum Transmission Units
Reliability
Cost
Policy

Static Routing
Does not send updates
No bandwith used and minimal system resources
Data path is pre-determinied
Time consuming and prone to error in configuring
Administrator must intervene during any network outages
Does not scale well for large growing networks

Dynamic Chad Routing
Only worry about BGP for Exterior Gateway Protocols
Look at the table
Advantages
        -Easier to configure and maintain network
        -Intervention not needed with network outages
        -Scales very well for large networks
Disadvantages
        -Consumes bandwidth and system resources
        -Updates can be intercepted
        -Data path is not pre-determined

IGP and EGP
OSPF, RIPv2, EIGRP, and ISIS can all communicate together through BGP
Distance Vector and Link State

Clients talk from port 68 to 67 when using DHCP

BGP
Road-map of the Internet
Routes traffic between Autonomous System (AS) Number
Advertises IP CIDR address blocks
Establishes Peer relationships
Complicated configuration
Complicated and slow path selection
How does it work?
Advertise a more specific route, like how a /24 is more specific than a /16
Follows shorter route
Hijacking
        1. Illegitimate advertising of addresses
        2. BGP propagates false information
        3. Prupose
                -stealing prefixes
                -monitoring traffic
                -intercept (and possibly modify) Internet traffick
                -'black holing' traffic
                -perform MitM
How to prevent
Ip prefix filtering
BGP hijacking detection
  - Track the change in TTL of incoming packets
  - Incresed round trip time (RTT) which increases latency
  - Monitoring misdirected traffic
BGPSec

Capture library
Using things like Libpcap, WinPcap, or NPCAP


TCPDUMP
sudo tcpdump -i eth0 -XXvvn '(not tcp port 22) && (udp port 68)'
sudo tcpdump -i eth0 -XXvvn 'src host 10.10.0.40 && not tcp port 22'
sudo tcpdump -XXvvnr /home/activity_resources/pcaps/Xtra.pcap

when trying to filter for the DSCP multiply it by 4, which is why  is true
ip[6:2] & 0x1FFF !=0
ip[12:4] is for source ip addresses
ip[16:4] is for destination ip address
ip[12:4]=0x0A0A2801
ip[12:4]&0xFFFFFF00=0x0A0A2800 this works as a subnet mask 


Ipv6 and 4 with ttl less than 64
ip[8]<=64||ip6[7]<=64

Don't fragment bit
ip[6]&0x40 = 0x40

Transport higher than 1024
tcp[0:2]>0x400||udp[0:2]>0x400

all packets with the udp protocol
ip[9]=0x11||ip6[6]=0x11

IP ID field of 213
ip[4:2]=213

Vlan tag
ether[12:2]=0x8100

question DNS
tcp[2:2]=0x40||udp[2:2]=0x40||tcp[0:2]=0x40||udp[0:2]=0x40

initial packet from tcp
tcp[13]=0x02

response packets from servers
tcp[13]=0x12

response packets from a server with closed tcp ports
tcp[13]=0x04

tcp and udp to well known ports
tcp[2:2]<1024||udp[2:2]<1024

HTTP
tcp[0:2]=80||tcp[2:2]=80

telnet traffic
tcp[0:2]=23||tcp[2:2]=23

arp traffic
ether[12:2]=0x0806

Evil bit
ip[6]&0x80=0x80

CHAOS
ip[9]=0x10

DSCP field of 37
ip[1]&0xFC=0x94

Traceroutes
ip[8]=1&&(ip[9]=0x11||ip[9]=0x01)

URG flag not set and pointer has a value
tcp[13]&0x20=0&&tcp[18:2]>0

TCP null scan to host 10.10.10.10
tcp[13]=0&&ip[16:4]=0x0A0A0A0A0A

Vlan hopper
ether[12:4]&0xffff0fff=0x81000001&&ether[16:4]&0xffff0fff=0x8100000a







Network Programming 
______________________________________________________________________________________________________________________

Scket types
1. Stream
Secure connection with a 3-way handshake

2. Datagram
UDP/Yeeter, sprays prays and hopes for the best

3. Raw
Different cause it raw dogs in with the kernel rather than in user space


Sockets are the no shit way networking works, ssh uses sockets. Sockets are just making a connection and whatever protocol they are built on 

User Space Applications
tcpdump or wireshark to read a file
nmap with no switches
netcat to create a listener above the well known range
using /dev/tcp or /dev/udp to transmit

Kernel Space Applications
using tcpdump or wiresharks on the wire
Using nmap for OS id or to set flags
netcat to create a listener

import socket
s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
*Family/Type/Protocol will be changed with whatever we're trying to create*

socket.socket([*family*[,*type*[*proto*]]])

Family Constants 
AF_INET, AF_INET6, AF_UNIX
Type Constants
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW
Proto Constants
0, IPPROTO_RAW

Raw sockets
Are used to testing specific defenses, avoiding them, and to be sneaky









#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ipaddr = '127.0.0.1'
port = 54321
s.connect((ipaddr, port))
s.send(b'Hello\n')
#b is to send a bytes like object
response, conn = s.recvfrom(1024
#Creating the buffer size for the response
print(response.decode())
#take bytes like object and decode it into UTF-8
s.close()

#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
ipaddr = '127.0.0.1'
port = 12345
s.sendto(b'Hello', (ipaddr,port))
response, conn = s.recvfrom(1024)
print(response.decode())


#!/usr/bin/python3
import socket
#system level commands
import sys
#Allows the creation of packet struture
from struct import *
#Create the raw socket
try:
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW
except socket.error as msg:
        print(msg)
        sys.exit()
packet = ''
src_ip "10.1.0.2"
dst_ip = "10.3.0.2"
#IP Header variables
ip_ver_ihl = 69      #Combined decimal value of 0x45 for IHL and Version
ip_tos = 0           # This combines the DSCP and ECN feilds
ip_len = 0           # The kernel will fill in the actually length of the packet
ip_id = 12345        # This sets the IP Identification for the packet
ip_frag = 0          # This sets fragmentation to off
ip_ttl = 64          # This determines the TTL of the packet when leaving the machine
ip_proto = 16        # This sets the IP protocol to 16 (Chaos). If this was 6 (TCP) or 17 (UDP) additional headers would be required
ip_check = 0         # The kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip) #Converts the IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)
ip_header = pack('!BBHHHBBH4s4s' , ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)
message = b'Networking is fun!'
packet = ip_header + message
# Send the packet
s.sendto(packet, (dst_ip, 0))








Network Reconnaissance
______________________________________________________________________________________________________________________



Active scanning
Network Scanning DNS Queries / Arp Requests
External                       Internal  

Passive scanning
DNS Lookups Whois Job Site Listings / Packet Sniffers
External                              Internal

Passive recon is about gathering info about targets without direct interaction, is more difficult but more sneaky
Involves identifying IP addresses and subdomains, any external or third party sites, people and technologies, content of interest, and vulnerabilities
Tools are WHOIS, Job site listings, phone numbers, google searches, passive OS fingerprinting nslookup, dig
The internet wayback machine

dig axfr @nsztm1.digi.ninja zonetransfer.me
whois ccboe.net
Google Dorking
*ccboe.net -site:*.ccboe.net
site:*.ccboe.net "Powered by"
Shodan
- is a repository of web accessable vulnerable devices, cost money, and can lead to trouble 

Active external recon
Different strategies, Remote to Local, Local to Remote, Local to Local, Remote to Remote
Scanning approach, aim (wide range target scan or target specific) and method (single source scan or distributed)
Broadcast ping and ping sweep, arp scan, syn scan, full connect scan, null scan, fin scan, xmas tree scan, UDP scan
ACK/Window scan, RPC scan, FTP scan, decoy scan, OS fingerprinting scan, version scan, protocol ping, discovery probes, idle scan
FTP bounce scan, maimon scan, ICMP echo discovery probe, Timestamp Discovery Probe, Netmask Request Discovery probe,
SCTP INIT Scan
Tools fping, hping3, arping, nmap, netcat
nmap by default does a full connect scan, scans the top 1000 ports used by everyone and host discovery 
Syn scan is with -sS and using sudo, with this verify what services are actually running
Version scan is with -sV which will check what service is actually running, with a -vv makes it verbose, and -O adds OS
nmap IP -vv -A -p 1-1024 or even -1024
nmap ip -T4 --min-rate 10000 makes it loud but faster
A -n will disable name resolution on nmap
namp ip -vv -sU -T4 --min-rate 10000 -Pn
nc -nzw1
-n no name resolution, -z port scanning mode, I/O mode using TCP, -w for wait for 1 second
curl will show the html, wget will download it adding -r gives you more
wget -r ftp://172.16.82.112:4444

Situational awareness
1. hostname / uname -a
2. whoami, w
3. pwd
4. sudo -l
5. cat /etc/services & /etc/hosts
6. ps -elf
7. netstat -ntlup / ss -ntlup
8. ifconfig / ip addr or ip a
9. arp / ip n or neigh
10. route / ip route or r
11. Check any important directories as directed

for ping sweep
for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done

21-23 80






Movement, Redirection, and Data Transfer
______________________________________________________________________________________________________________________

TFTP
Small and simple communication
FTP
Active mode
        The pizza is delivered
Passive mode
        You go get the pizza
No matter what with FTP there are two ports being used. The command port (21) and the port used for the actual data transfer
SFTP
SSH File Transfer Protocol, has a higher range of features over SCP like resuming interrupted transfers, directory listings, and remote file removal.
FTPS 
File Transfer Protocol Secure
        has an implicit mode and explicit mode
        implicit has encryption at all times over ports 990 and 989 
        explicit mode uses port 21 and can be secure or unsecure
SCP
uses port 22 and ssh but is non interactive
scp <options> <source> <destination> 
scp -P <port>
scp -r <recursively copy a directory>
scp -3 <3 way communication>
scp file.txt <user>@<ip address>:<path in relation to user home directory>
scp <user>@<IP>:/etc/ssh/sshd_config .

NETCAT
Uses network socket connections to read and write data
Can be used for metasploit shells or banner grabbing

Client (seds file): nc 10.2.0.2 9001 < file.txt
Listener (receives file): nc -l -p 9001 > newfile.txt

named pipes
nkfifo <name of pipe>

FOR RELAY
<nc command> 0<piper | <nc command> 1>piper

on one machine do nc -lp 5454
on another do nc 10.10.0.40 4343
on the IH machine nc 172.16.82.106 5454 0<piper | nc -lp 4343 1>piper



Local and Dynamic SSH Tunneling
Local port forwarding
ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
or
ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT

SSH Local Port Forwarding

    Creates a local port (1111) on the local host that forwards to a target machine’s port 80.

ssh student@172.16.82.106 -L 1111:localhost:80 -NT

or

ssh -L 1111:localhost:80 student@172.16.82.106 -NT

SSH Local Port Forwarding Through a Local Port

Internet Host:
ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
firefox localhost:2222

    Creates an additional local port on the local host that forwards to a target machine through the previous channel created.

SSH Dynamic Port Forwarding

    Syntax

ssh -D <port> -p <alt port> <user>@<pivot ip> -NT

    Proxychains default port is 9050

    Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward.

    Allows the use of scripts and other userspace programs through the tunnel.

SSH Dynamic Port Forwarding 1-Step

Blue Private Host-1:
ssh student@172.16.82.106 -D 9050 -NT

proxychains ./scan.sh
proxychains ssh student@10.10.0.40

Second Pivot External Active Recon
tp4
11.1
SSH Local Port ForwardingSyntaxssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT or ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT

Dynamic port forwarding
ssh -D <port> -p <alt port> <user>@<pivot ip> -NT

SSH Remote port forwarding
ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT 
or
ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT

L -> <-R

BOARD STUFF
IH> <nmap> Bob
IH> nc Bob 22
        ProFTPd
        nc Bob 25
        OpenSSH
IH>  wget -r ftp://Bob:22
IH>  ssh user1@Bob
Bob> *perform situational awareness*
IH>  ssh user1@Bob -p 25 -L 51000:127.0.0.1:80 -NT
Bob> ssh student@IH -R 51099:127.0.0.1:80 -NT 
IH>  wget -r http://127.0.0.1:51000 or 51099
IH>  ssh user1@BOB -p 25 -D 9050 -NT
IH>  proxychains <nmap -Pn> Jerry,Thomas
IH>  proxychains wget -r gtp://Jerry
IH>  proxychains telnet Jerry
Jerry>  ssh user1@Bob -p 25 -R 51098:127.0.0.1:33 -NT
IH>  ssh user1@Bob -p 25 -L 51001:127.0.0.1:51098
IH>  nc 127.0.0.1 51001
        OpenSSH
IH>  ssh user1@127.0.0.1 -p 51001
Jerry> exit
IH>  ssh user1@127.0.0.1 -p 51001 -D 9050 -NT *close the old connection to use the 9050 port*
IH>  ssh user1@Bob -p 25 -L 51002:Jerry:23 -NT
IH>  telnet 127.0.0.1 51502
Jerry> ssh user1@Bob -p 25 -R 51098:127.0.0.1:22 -NT
IH>  ssh user1@127.0.0.1 -p 51001
Jerry> exit
IH>  ssh user1@127.0.0.1 -p 51001 -D 9050 -NT
IH>  proxychains <nmap> -Pn Joe or proxychains ./scan.sh
IH>  proxychains nc Joe 22
        OpenSSH
IH>  proxychains nc Joe 80
        Telnet
IH>  proxychains nc Joe 443
                ProFTPd
IH>  proxychains wget -r ftp://Joe:443





~/recon
________
Bob:22/
127.0.0.1:51000/
Jerry/
Thomas/
Joe:443/

51000 -> Bob:80
51099 -> Bob:80
51001 -> Bob:51098
51095 -> Jerry:22
51002 -> Jerry:23
51098 -> Jerry:22
9050  -> *

-NT makes it so the terminal no longer accepts input


when digging around or Passive Recon Methodology
Hostname
interfaces and subnets
        ip a 
        ifconfig
Neighbors
        ip n
        arp -a
Files of interest
        find / flags 2>/dev/null
Other listening ports
        netstat -ntlp
        ss -ntlp
Available Tools
        which tcpdump wireshark nmap telnet get curl ping
NET RECON
Host Discovery
        nmap nc scan script ping sweep
Port Discovery
      nmap nc scan script
Port Validation
        Banner grabbing using nc
Follow-on actions based on ports found
        If 22 or 23 CONNECT and PASSIVE RECON
        If 21 or 80 wget -r IP or wget -r ftp://ip or firefox
SCAN METHODOLOGY
Quick Scan Ports 21-23, 80
Specific ports based on hints found
Wel known port range
        0-1023
Chunks of 2000 or first 10000
Hail Mary - Scan all ports (65535)




using sudo nmap -Pn 192.168.0.20,30,40,200 -T4 -p 21-23,80

T3 (Atropia) Float IP address is - 10.50.42.216

T4 (Pineland) Float IP address is - 10.50.44.211 (Note - You can only telnet here to act as an insider, this will not be a routed path)





1.
ssh net5_student10@10.50.42.216 -L 51000:10.3.0.27:80 -NT
 wget -r http://127.0.0.1:51000

2.
ssh net5_student10@10.50.42.216 -D 9050 -NT
proxychains wget -r ftp://10.3.0.1

3.
telnet 10.50.44.211

4.
IH> telnet 10.50.44.211
pineland> ssh net5_student10@10.3.0.10 -R 51099:localhost:22 -NT
IH> ssh net5_student10@10.50.42.216 -L 51001:localhost:51099 -NT
IH> ssh net5_student10@localhost -p 51001 -L 51002:10.2.0.2:80 -NT
IH> wget -r http://127.0.0.1:51002
IH> cat 127.0.0.1\:51002/index.html

5. 
ssh net5_student10@127.0.0.1 -p 51001 -D 9050 -NT
proxychains wget -r ftp://10.2.0.2

6.
ssh net5_student10@10.50.42.216 -D 9050 -NT
proxychains ./scan.sh
proxychains wget -r http://10.3.0.1
cat 10.3.0.1/index.html

7.
proxychains wget -r ftp://10.3.0.27
cat 10.3.0.27/flag.txt

8.
ssh net5_student10@10.50.42.216 -L 51006:10.4.0.1:22 -NT
ssh net5_student10@127.0.0.1 -p 51006 -D 9050 -NT
proxychains wget -r ftp://10.5.0.1


9.
proxychains wget -r http://10.5.0.1

10.
proxychains wget -r ftp://10.5.0.57

11.
proxychains wget -r http://10.5.0.57

Data Collection
telnet 10.50.40.12

1.
data-collection-net-ssh-01> ssh student@10.50.45.241 -R 51097:127.0.0.1:22 -NT
IH> ssh net5_student10@127.0.0.1 -p 51097 -D 9050 -NT
IH> proxychains wget -r http://127.0.0.1

2.
SSH 0-1> for i in {1..254} ;do (ping -c 1 192.168.0.$i | grep "bytes from" &) ;done 2>/dev/null
IH> proxychains nmap -T4 -sV -Pn 192.168.0.30 
IH> proxychains nc 192.168.0.30 4444 

3.

4. 
IH> proxychains wget -r ftp://192.168.0.20

5.
IH> ssh net5_student10@127.0.0.1 -p 51097 -L 51008:192.168.0.20:3333 -NT
IH> ssh net5_student10@127.0.0.1 -p 51008 -D 9050 -NT
IH> proxychains wget -r ftp://192.168.0.50

6.
IH> ssh net5_student10@127.0.0.1 -p 51097 -D 9050 -NT
IH> wget -r http://192.168.0.40

7.
found in the 192.168.0.40 hint

8.

9.
IH> ssh net5_student10@127.0.0.1 -p 51097 -L 51009:192.168.0.40:5555 -NT
IH> ssh net5_student10@127.0.0.1 -p 51009 -D 9050 -NT
IH> proxychains wget -r http://172.16.0.60

10.
IH> ssh net5_student10@127.0.0.1 -p 51097 -L 51009:192.168.0.40:5555 -NT
IH> ssh net5_student10@127.0.0.1 -p 51009 -L 51010:172.16.0.60:23 -NT
ssh-06> ssh net5_student10@192.168.0.40 -p 5555 -R 51095:127.0.0.1:22 -NT
IH> ssh net5_student10@127.0.0.1 -p 51097 -L 51011:192.168.0.40:51095 -NT ??






Network Analysis 
______________________________________________________________________________________________________________________


Wireshark
TCPDUMP
Fingerprinting and host identification is done using POF (Passive OS Fingerprinting)
You can find it by doing 
IH> more /etc/p0f/p0f.fp
We can use Libpcap, WinPcap, and NPCAP
We do a week for baselining, to understand when people are supposed to be at work and when they aren't, and what is the norm or unusual. 
Wireshark Expert information could be useful on CTFD
Ctrl+F for string use The display filter for more help


sudo tcpdump -r analysis-demo.pcap "tcp[13]=0x02" | awk '{print $3}' | cut -d. -f1,2,3,4 | sort -n | uniq





Full Packet Capture Data is a pcap
Session Data
        sflow is for switches
        NetFlow pulls all the ip information or router
Statistical Data 
Packet String Data
Alert Data
Log Data

Sensors 
        In-Line goes through our machine
        Passive gets data that we aren't in the middle of
Data Collection
        TAP
        SPAN
        ARP Spoofing (MitM) is a gratuitous reply
Indicator of Attack (IOA)
        Proactive
        A series of actions that are suspicious together
        Focus on Intent
        Looks for what must happen
                Code execution, persistence, lateral movement, etc.



33.
meterpreter

34. 
ruby

35.













Network Traffic Filtering 
______________________________________________________________________________________________________________________






sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT
sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A INPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
sudo iptables -P INPUT DROP
sudo iptables -P OUTPUT DROP
sudo iptables -I INPUT -s 172.16.82.106 -j DROP
sudo iptables -I OUTPUT -d 172.16.82.106 -j DROP
sudo iptables -A INPUT -s 172.16.82.112 -j ACCEPT
sudo iptables -A OUTPUT -d 172.16.82.112 -j ACCEPT
sudo iptables -L -v
sudo iptables -A INPUT -m state --state INVALID -j DROP
sudo iptables -A INPUT -f -j DROP
sudo iptables -A INPUT -i eth0 -p tcp --syn -m limit --limit 10/second -j ACCEPT
sudo iptables-save > cctcipt.conf
sudo iptables-restore < cctc.conf -v

















